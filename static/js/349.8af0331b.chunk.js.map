{"version":3,"file":"static/js/349.8af0331b.chunk.js","mappings":"oOAEaA,EAAcC,EAAAA,QAAAA,IAAH,8FAMXC,EAAWD,EAAAA,QAAAA,EAAH,2CAIRE,EAAkBF,EAAAA,QAAAA,IAAH,wK,SCVb,SAASG,IACtB,OACE,SAACJ,EAAD,WACE,SAACE,EAAD,CAAUG,KAAK,2DAA2DC,OAAO,QAAjF,UACE,SAACH,EAAD,CAAiBI,IAAKC,EAAQ,MAA2BC,IAAI,sBAIpE,C,0ECHc,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,CACpBC,oBAAoB,EACpBC,QAAS,KAQLC,EAAmBC,EAAAA,GAAW,CACpCC,MAAOD,EAAAA,KAAaC,MAAM,wBAAwBC,SAAS,YAC3DC,SAAUH,EAAAA,KAAaE,SAAS,WAAWE,IAAI,KAG/C,OACE,SAAC,KAAD,CACEC,cAZsB,CACxBJ,MAAO,GACPE,SAAU,IAWRJ,iBAAkBA,EAClBO,kBAAkB,EAClBC,gBAAgB,EAChBC,SAAU,SAAAC,GACRf,GAASgB,EAAAA,EAAAA,IAAMD,GAChB,EAPH,SASG,SAAAE,GAAK,OACJ,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,YAAY,QACZC,OAAQL,EAAMM,WACdC,SAAUP,EAAMQ,aAChBC,MAAOT,EAAMF,OAAOR,UAGrBU,EAAMU,cAAgBV,EAAMW,OAAOrB,MAAQsB,EAAAA,OAAAA,QAAeZ,EAAMW,OAAOrB,MAAOL,GAAiB,MAClG,SAAC,KAAD,CAAY4B,QAAM,EAAlB,UACE,SAAC,KAAD,CACEZ,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,OAAQL,EAAMM,WACdC,SAAUP,EAAMQ,aAChBC,MAAOT,EAAMF,OAAON,aAGrBQ,EAAMU,cAAgBV,EAAMW,OAAOnB,SAAWoB,EAAAA,OAAAA,QAAeZ,EAAMW,OAAOnB,SAAUP,GAAiB,MAC1G,SAAC,KAAD,CAAQiB,KAAK,SAASY,QAASd,EAAMe,aAArC,qBA1BI,GA+BX,C,iCCnDc,SAASC,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBpC,GAAWC,EAAAA,EAAAA,MACjB,GAAuBoC,EAAAA,EAAAA,MACjBC,GADN,eAC2BC,IAAI,SAQ/B,OANAC,QAAQC,IAAI,UAAWP,IAEvBQ,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,GAAgBL,GAC1B,GAAE,CAACtC,EAAUsC,IAEVJ,GACK,SAAC,KAAD,CAAUU,GAAG,WAIpB,+BACE,UAAC,KAAD,YACE,SAAC,KAAD,qBACA,SAAC7C,EAAD,KACA,SAACN,EAAD,KACA,UAAC,KAAD,oCACyB,KACvB,SAAC,KAAD,CAAYmD,GAAG,YAAf,0BAEF,UAAC,KAAD,mCACwB,KACtB,SAAC,KAAD,CAAYA,GAAG,WAAf,sCAKT,C","sources":["components/Auth/GoogleSignIn/GoogleIcon.styled.jsx","components/Auth/GoogleSignIn/GoogleIcon.jsx","components/Auth/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const IconLink = styled.a`\n  margin: 0 auto;\n`;\n\nexport const GoogleIconStyle = styled.img`\n  width: 50px;\n  height: 50px;\n  opacity: 0.8;\n  transition: opacity 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    opacity: 1;\n  }\n`;","import { IconWrapper, IconLink, GoogleIconStyle } from \"./GoogleIcon.styled\";\n\nexport default function GoogleIcon() {\n  return (\n    <IconWrapper>\n      <IconLink href=\"https://petly-backend-vopf.onrender.com/api/users/google\" target=\"_self\">\n        <GoogleIconStyle src={require('images/auth/google.png')} alt=\"google-sign-in\"/>\n      </IconLink>\n    </IconWrapper>\n  )\n}\n","import { Input, Button, Form, InputField } from '../Auth.styled';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/auth-operation';\nimport * as Yup from 'yup';\nimport { Notify } from 'notiflix';\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n\n  const notifyOptions = {\n    showOnlyTheLastOne: true,\n    timeout: 2000,\n  }\n\n  const initialLoginState = {\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email format').required('Required'),\n  password: Yup.string().required('Require').min(7),\n  });\n  \n  return (\n    <Formik\n      initialValues={initialLoginState}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnBlur={false}\n      onSubmit={values => {\n        dispatch(login(values));\n      }}\n    >\n      {props => (\n        <Form>\n          <InputField>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              onBlur={props.handleBlur}\n              onChange={props.handleChange}\n              value={props.values.email}\n            />\n          </InputField>\n            {props.isSubmitting && props.errors.email ? Notify.failure(props.errors.email, notifyOptions) : null}\n          <InputField margin>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onBlur={props.handleBlur}\n              onChange={props.handleChange}\n              value={props.values.password}\n            />\n          </InputField>\n            {props.isSubmitting && props.errors.password ? Notify.failure(props.errors.password, notifyOptions) : null}\n        <Button type=\"submit\" onClick={props.handleSubmit}>Login</Button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n","import {\n  Title,\n  LinkText,\n  StyledLink,\n  BackgroundContainer,\n} from '../../components/Auth/Auth.styled';\nimport GoogleIcon from '../../components/Auth/GoogleSignIn/GoogleIcon';\nimport { selectIsLogin } from 'redux/auth/auth-selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router';\nimport LoginForm from 'components/Auth/LoginForm/LoginForm';\nimport { useSearchParams } from 'react-router-dom';\nimport { addTokenToStore } from 'redux/auth/auth-slice';\nimport { useEffect } from 'react';\n\nexport default function LoginPage() {\n  const isLogin = useSelector(selectIsLogin);\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get('token');\n\n  console.log(\"isLogin\", isLogin);\n\n  useEffect(() => {\n    dispatch(addTokenToStore(token));\n  }, [dispatch, token]);\n\n  if (isLogin) {\n    return <Navigate to=\"/user\" />;\n  }\n\n  return (\n    <>\n      <BackgroundContainer>\n        <Title>Login</Title>\n        <LoginForm />\n        <GoogleIcon />\n        <LinkText>\n          Don't have an account?{' '}\n          <StyledLink to=\"/register\">Register</StyledLink>\n        </LinkText>\n        <LinkText>\n          Forgot your password?{' '}\n          <StyledLink to=\"/restore\">Password recovery</StyledLink>\n        </LinkText>\n      </BackgroundContainer>\n    </>\n  );\n}\n"],"names":["IconWrapper","styled","IconLink","GoogleIconStyle","GoogleIcon","href","target","src","require","alt","LoginForm","dispatch","useDispatch","notifyOptions","showOnlyTheLastOne","timeout","validationSchema","Yup","email","required","password","min","initialValues","validateOnChange","validateOnBlur","onSubmit","values","login","props","id","type","name","placeholder","onBlur","handleBlur","onChange","handleChange","value","isSubmitting","errors","Notify","margin","onClick","handleSubmit","LoginPage","isLogin","useSelector","selectIsLogin","useSearchParams","token","get","console","log","useEffect","addTokenToStore","to"],"sourceRoot":""}